

Poly + Morphism (Many Forms)
-Ability of the objects to take on many forms
-Occurs when reference type is parent class/interface and object type is child

Animal animal1 = new Dog();
Animal animal2 = new Cat();
Animal animal3 = new Bird();
Flyable animal4 = new Eagle();

• There are 4 Object Oriented Programming (OOP) principles: • Encapsulation
• Inheritance
• Abstraction
• Polymorphism

Calling method in polymorphism
• Only the methods in reference type can be called
• When we call a method, it will call overridden version from a child class
• If method is not overridden, it will call parent/super class version

instanceof keyword
• Instanceof keyword can be used to check if the object is certain class. (Returns boolean)

Polymorphism Rules
• Reference type can be parent class or interface
• Object type can be any extending or implementing child class
• Reference type decides what is accessible
• Object type decides which implementation of the method to be executed when the method is called

Reference Type Castings
• Casting one reference type to another
• There must be IS A (inheritance) relation between the object type and reference
type we are casting it to, otherwise ClassCastException will be thrown
• There are two types of reference type castings: upcasting and downcasting

Upcasting
• Casting the smaller reference type (sub type) to larger reference type (super type)
• Upcasting is done implicitly and cast operator is not required to be given explicitly
• Allows us to achieve polymorphism without any explicit action

Downcasting
• Casting the larger reference type (super type) to smaller reference type (sub type)
• Downcasting is done explicitly and cast operator is required to be given explicitly
• Allows us to access the features of the objects type that are not in reference type

